import React, { useState, useContext, useEffect } from "react";
import Select from "react-select";

import { focusFetchDataFromApi } from "../../services/focusFetchAPI";
import { JobContext } from "../../context/JobContext";
import { generateCostEntryExcel } from "../../utils/generateCostEntryExcel";
import { generateCostEntryPdf } from "../../utils/generateCostEntrypdf";

const customStyles = {
  menu: (provided) => ({
    ...provided,
    zIndex: 13,
    width: "250px",
  }),
  //  "dropdown-content": (provided) => ({ ...provided }),

  control: (provided) => ({
    ...provided,
    borderColor: "#868e96",
    width: "150px",
    paddingLeft: "3px",
    // zIndex: 9,
    // Add custom styles for the control (container)
    // border color on focus and active state
    boxShadow: "none", // Remove default box shadow
    "&:hover": { borderColor: "#44799b" },
    borderLeft: "2px solid red",
  }),
  // input styles
  input: (provided) => ({
    ...provided,
    // Add custom styles for the input
    // color: "red", // Change the text color to red as an example
    fontSize: "13px", // Set the font size
    fontWeight: "400", // Set the font weight
    // zIndex: 9,
    width: "150px",
    // paddingLeft: "3px",
    border: "none",
  }),

  singleValue: (provided) => ({
    ...provided,
    // Add custom styles for the selected value
    color: "black", // Change the text color to red as an example
    fontSize: "13px", // Set the font size
    fontWeight: "400", // Set the font weight
  }),
  option: (provided, state) => ({
    ...provided,
    // zIndex: 9,
    color: state.isSelected ? "black" : "black", // Text color based on selection
    backgroundColor: state.isSelected ? "#c6def5" : "#f8f9fa", // Background color based on selection
    "&:hover": {
      backgroundColor: state.isSelected ? "#dce7f2" : "#e2e6ea", // Change hover background based on selection
      color: "black", // Text color on hover
    },
  }),
};

function CostEntry() {
  const [showForm, setShowForm] = useState(false);
  const [selectedVendor, setSelectedVendor] = useState(null);
  const [vendorOptions, setVendorOptions] = useState([]);
  const [invoiceNo, setInvoiceNo] = useState("");
  const [invoiceDate, setInvoiceDate] = useState(""); // Format: YYYY-MM-DD
  const [zeroTaxCost, setZeroTaxCost] = useState("");
  const [taxCost, setTaxCost] = useState("");
  const [taxAmount, setTaxAmount] = useState("");
  const [narrationEN, setNarrationEN] = useState("");
  const [narrationAR, setNarrationAR] = useState("");

  const {
    sessionId,
    setIsLoading,
    costEntry,
    setCostEntry,
    selectedJob,
    fetchCostEntryDetails,
    costDate,
  } = useContext(JobContext); // get sessionId from context

  useEffect(() => {
    fetchVendorDetails();
  }, []);

  const handleAddNewCostClick = () => {
    setShowForm(true);
  };

  const handleCancelClick = () => {
    setShowForm(false);
  };

  const dateToInt = (date) => {
    var postingIntDate =
      new Date([date]).getDate() +
      (new Date([date]).getMonth() + 1) * 256 +
      new Date([date]).getFullYear() * 65536;
    return postingIntDate;
  };

  const handleSaveCostClick = async () => {
    // Implement save logic here

    try {
      const missingFields = [];

      if (!selectedVendor) missingFields.push("Vendor");
      if (!invoiceNo.trim()) missingFields.push("Invoice No");
      if (!invoiceDate) missingFields.push("Invoice Date");
      if (
        (!zeroTaxCost || parseFloat(zeroTaxCost) <= 0) &&
        (!taxCost || parseFloat(taxCost) <= 0)
      )
        missingFields.push("0 Tax Cost or Tax Cost");

      if (missingFields.length > 0) {
        alert(
          `Please fill the following field(s): ${missingFields.join(", ")}`
        );
        return;
      }

      const costBody = [];

      // Taxable entry
      if (parseFloat(taxCost) > 0) {
        costBody.push({
          Job__Id: selectedJob?.jobId || 0,
          Division__Code: "Head Office",
          Item__Code: "JCA",
          TaxCode__Code: "SR-REC",
          Quantity: 1.0,
          Rate: parseFloat(taxCost || 0),
          Gross: parseFloat(taxCost || 0),
          VendorInvNo: invoiceNo || "",
          VendorInvDate: dateToInt(invoiceDate) || 0,
          sRemarks: narrationEN || "",
          RemarksArabic: narrationAR || "",
        });
      }

      // Zero-rated entry
      if (parseFloat(zeroTaxCost) > 0) {
        costBody.push({
          Job__Id: selectedJob?.jobId || 0,
          Division__Code: "Head Office",
          Item__Code: "JCA",
          TaxCode__Code: "ZR",
          Quantity: 1.0,
          Rate: parseFloat(zeroTaxCost || 0),
          Gross: parseFloat(zeroTaxCost || 0),
          VendorInvNo: invoiceNo || "",
          VendorInvDate: dateToInt(invoiceDate) || 0,
          sRemarks: narrationEN || "",
          RemarksArabic: narrationAR || "",
        });
      }

      const newCostRequestEntry = {
        data: [
          {
            Body: costBody,
            Header: {
              Date: dateToInt(invoiceDate),
              PurchaseAC__Code: "511003",
              VendorAC__Id: selectedVendor?.value || 0,
              "Place of supply__Code": "JDH",
              Jurisdiction__Code: "KSA",
              Branch__Code: "HEAD OFFICE",
              sNarration: "",
            },
          },
        ],
      };
      const costResponse = await focusFetchDataFromApi(
        "Transactions/776/",
        newCostRequestEntry,
        sessionId,
        setIsLoading
      );

      if (costResponse.error) {
        console.error("Error posting job cost allocation:", costResponse.error);
        alert(
          `Error posting job cost allocation: ${
            costResponse?.error?.message || costResponse.error
          }`
        );
        return;
      }
      if (costResponse && costResponse?.result === 1) {
        alert(
          `Job Costing Allocation Posted Successfully,\nVoucherNo:  ${costResponse?.data[0]?.VoucherNo}`
        );
        fetchCostEntryDetails(selectedJob.jobId);
        setSelectedVendor(null);
        setInvoiceNo("");
        setInvoiceDate("");
        setZeroTaxCost("");
        setTaxCost("");
        setTaxAmount("");
        setNarrationEN("");
        setNarrationAR("");
        setShowForm(false);
      }
    } catch (error) {
      console.error("Error saving cost entry:", error);
    }
  };

  const handleSelectVendor = async (selected) => {
    console.log("selectedVendor", selected);
    setSelectedVendor(selected);
  };
  const fetchVendorDetails = async () => {
    const vendorQuery = `
      SELECT sName AS label, iMasterId AS value 
      FROM mCore_Account 
      WHERE iMasterId <> 0 
      AND iStatus <> 5 
      AND iAccountType IN (6,7);
    `;
    const vendorReqData = {
      data: [{ Query: vendorQuery }],
    };

    try {
      const vendorResponse = await focusFetchDataFromApi(
        "utility/executesqlquery",
        vendorReqData,
        sessionId,
        setIsLoading
      );

      if (
        vendorResponse &&
        vendorResponse.result === 1 &&
        vendorResponse.data?.[0]?.Table?.length > 0
      ) {
        setVendorOptions(vendorResponse.data[0].Table);
      } else {
        console.warn("No vendor data found.");
        setVendorOptions([]);
      }
    } catch (error) {
      console.error("Error fetching vendor details:", error);
      setVendorOptions([]);
    }
  };

  const toggleCheckbox = (rowIndex) => {
    const updatedCostEntry = [...costEntry]; // Create a copy of the jobs array
    updatedCostEntry[rowIndex] = {
      ...updatedCostEntry[rowIndex],
      selected: !updatedCostEntry[rowIndex]?.selected,
    };

    setCostEntry(updatedCostEntry); // âœ… Update context
  };

  const onExport = async () => {
    // Export logic here
    if (costEntry.length === 0) {
      alert("No data available for export.");
      return;
    }

    generateCostEntryExcel(costEntry, selectedJob, costDate);
  };

  const onExportpdf = async () => {
    // Export logic here
    if (costEntry.length === 0) {
      alert("No data available for export.");
      return;
    }

    generateCostEntryPdf(costEntry, selectedJob, costDate);
  };

  return (
    <div>
      {showForm ? (
        <div className="filters-bar">
          <div className="filter-group">
            <label htmlFor="vendor-select">Vendor</label>
            <Select
              className="customDropdown head_input "
              styles={customStyles}
              options={vendorOptions}
              value={selectedVendor}
              onChange={handleSelectVendor}
              isClearable={true}
              placeholder="Select Vendor"
            />
            {/* <select id="vendor-select">
              <option>Choose a Vendor</option>
            </select> */}
          </div>

          <div className="filter-group ">
            <label htmlFor="invoice-no">Invoice No</label>
            <input
              className="input-field manditory-feild"
              id="invoice-no"
              type="text"
              placeholder="Invoice No"
              value={invoiceNo}
              onChange={(e) => setInvoiceNo(e.target.value)}
            />
          </div>

          <div className="filter-group">
            <label htmlFor="inv-date">Invoice Date</label>
            <input
              className="input-field manditory-feild"
              id="inv-date"
              type="date"
              placeholder="INV Date"
              value={invoiceDate}
              onChange={(e) => setInvoiceDate(e.target.value)}
            />
          </div>

          <div className="filter-group">
            <label htmlFor="zero-tax-cost">0 Tax Cost</label>
            <input
              className="input-field"
              id="zero-tax-cost"
              type="number"
              placeholder="0 Tax Cost"
              value={zeroTaxCost}
              onChange={(e) => setZeroTaxCost(e.target.value)}
              min="0"
            />
          </div>

          <div className="filter-group">
            <label htmlFor="tax-cost">Tax Cost</label>
            <input
              className="input-field"
              id="tax-cost"
              type="number"
              placeholder="Tax Cost"
              value={taxCost}
              onChange={(e) => setTaxCost(e.target.value)}
              min="0"
            />
          </div>

          <div className="filter-group">
            <label htmlFor="tax-amount">Tax Amount</label>
            <input
              className="input-field"
              id="tax-amount"
              type="number"
              placeholder="Tax Amount"
              value={taxAmount}
              onChange={(e) => setTaxAmount(e.target.value)}
              min="0"
            />
          </div>

          <div className="filter-group">
            <label htmlFor="narration-en">Narration (English)</label>
            <input
              className="input-field"
              id="narration-en"
              type="text"
              placeholder="Narration English"
              value={narrationEN}
              onChange={(e) => setNarrationEN(e.target.value)}
            />
          </div>

          <div className="filter-group">
            <label htmlFor="narration-ar">Narration (Arabic)</label>
            <input
              className="input-field"
              id="narration-ar"
              type="text"
              placeholder="Narration Arabic"
              value={narrationAR}
              onChange={(e) => setNarrationAR(e.target.value)}
            />
          </div>

          <div
            className="filter-group"
            style={{ display: "flex", flexDirection: "row", gap: "8px" }}
          >
            <button className="btn btn_post" onClick={handleSaveCostClick}>
              Save Cost
            </button>
            <button className="btn btn_post" onClick={handleCancelClick}>
              Cancel
            </button>
            <button
              className="btn btn_post"
              onClick={onExport}
              style={{
                // position: "absolute",
                // right: "20px",
                // // background: "transparent",
                // border: "none",
                // fontSize: "18px",
                cursor: "pointer",
                // color: "#333",
              }}
            >
              Export to Excel
            </button>
          </div>
        </div>
      ) : (
        !selectedJob?.costLocked && (
          <div style={{ padding: "6px", textAlign: "start" }}>
            <button className="btn btn_post" onClick={handleAddNewCostClick}>
              Add New Cost
            </button>
            <button
              className="btn btn_post"
              onClick={onExport}
              style={{
                // position: "absolute",
                // right: "20px",
                // // background: "transparent",
                // border: "none",
                // fontSize: "18px",
                cursor: "pointer",
                // color: "#333",
              }}
            >
              Export to Excel
            </button>
          </div>
        )
      )}
      <div style={{ overflowX: "auto", maxHeight: "85vh" }}>
        <table className="job-table">
          <thead id="table-header">
            <tr>
              <th>Move?</th>
              <th>Vendor Id</th>
              <th>INV #</th>
              <th>INV Date</th>
              {/* <th>0 Tax DB</th>
              <th>Tax DB</th> */}
              <th>Credit</th>
              <th>0 Tax Cost</th>
              <th>Tax Cost</th>
              <th>Tax Amount</th>
              <th>Total Cost</th>
              <th>EIR Id</th>
              <th>Challan</th>
              <th>Cntr #</th>
              <th>Narration</th>
            </tr>
          </thead>
          <tbody>
            {Array.isArray(costEntry) && costEntry?.length > 0 ? (
              costEntry?.map((entry, index) => (
                <tr
                  key={index}
                  className={`tr-tablerow ${
                    index % 2 === 0 ? "even-row" : "odd-row"
                  } ${entry.selected ? "selected-row" : ""}`}
                >
                  <td style={{ textAlign: "center" }}>
                    <input
                      type="checkbox"
                      checked={entry?.selected}
                      onChange={() => toggleCheckbox(index)}
                      disabled={selectedJob?.costLocked}
                    />
                  </td>
                  <td>{entry.vendorAcc}</td>
                  <td>{entry.vendorInvNo}</td>
                  <td>{entry.vendorInvDate}</td>
                  {/* <td>{entry.zeroTaxCost}</td>
                  <td>{entry.taxCost}</td> */}
                  <td>{entry.purchaseAcc}</td>
                  <td className="text-align-right">{entry.zeroTaxCost}</td>
                  <td className="text-align-right">{entry.taxCost}</td>
                  <td className="text-align-right">{entry.taxAmount}</td>
                  <td className="text-align-right">{entry.totalCost}</td>
                  <td>{entry.eirId}</td>
                  <td>{entry.challan}</td>
                  <td>{entry.containerNo}</td>

                  <td>{entry.sRemarks}</td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="15" style={{ textAlign: "center" }}>
                  No data found
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default CostEntry;
