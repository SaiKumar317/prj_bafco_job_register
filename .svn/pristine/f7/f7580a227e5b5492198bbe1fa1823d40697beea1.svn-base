import React, { Component } from "react";
import { JobContext } from "../context/JobContext";
import HeaderTabs from "../components/jobDetails/HeaderTabs";
import BodyTabs from "../components/jobDetails/BodyTabs";
import { focusFetchDataFromApi } from "../services/focusFetchAPI";
import { generateCostEntryPdf } from "../utils/generateCostEntrypdf";

import "../styles/jobDetails.css";
import LoadingView from "../components/common/LoadingView";

class JobDetails extends Component {
  state = {
    activeHeaderTab: "Job/Inv",
    activeBodyTab: "Cost Entry",
    previousJobId: null, // To track changes in selectedJob
    initialCostDate: "",
  };
  static contextType = JobContext;

  componentDidUpdate(prevProps, prevState) {
    const { selectedJob } = this.context;

    // Check if selectedJob has changed
    if (selectedJob && selectedJob.jobId !== this.state.previousJobId) {
      this.setState({ previousJobId: selectedJob.jobId }, () => {
        this.context.fetchCostEntryDetails(selectedJob.jobId);
      });
    }
  }

  setHeaderTab = (tab) => {
    this.setState({ activeHeaderTab: tab });
  };

  setBodyTab = (tab) => {
    this.setState({ activeBodyTab: tab });
  };

  onExportpdf = async () => {
    const { costEntry, selectedJob, costDate } = this.context;
    // Export logic here
    if (costEntry.length === 0) {
      alert("No data available for Preview Cost Sheet.");
      return;
    }

    generateCostEntryPdf(costEntry, selectedJob, costDate);
  };

  render() {
    const { activeHeaderTab, activeBodyTab, initialCostDate } = this.state;
    const {
      selectedJob,
      isLoading,
      costDate,
      setCostDate,
      fetchCostEntryDetails,
    } = this.context;

    return (
      <div className="jobdetails-container">
        <p className="module_name">Job Costing</p>
        {isLoading && <LoadingView />}
        {/* Header Form Section */}
        <div className="job-header">
          <div>
            <div className="job-fields">
              <div className="filter-group">
                <label htmlFor="job-id">Job Id</label>
                <input
                  className="input-field"
                  id="job-id"
                  type="text"
                  value={selectedJob.jobName}
                  readOnly
                />
              </div>

              <div className="filter-group">
                <label htmlFor="cost-date">Cost Date</label>
                <input
                  className="input-field"
                  id="cost-date"
                  type="date"
                  defaultValue={costDate}
                  onChange={(e) => setCostDate(e.target.value)}
                  onFocus={() => this.setState({ initialCostDate: costDate })}
                  onBlur={() => {
                    if (costDate !== initialCostDate) {
                      fetchCostEntryDetails(selectedJob?.jobId);
                    }
                  }}
                />
              </div>

              <div className="filter-group">
                <label htmlFor="total-sales">Total Sales</label>
                <input
                  className="input-field"
                  id="total-sales"
                  type="text"
                  value={selectedJob.totalSales}
                  readOnly
                />
              </div>

              <div className="filter-group">
                <label htmlFor="total-cost">Total Cost</label>
                <input
                  className="input-field"
                  id="total-cost"
                  type="text"
                  value={selectedJob.totalCost}
                  readOnly
                />
              </div>

              <div className="filter-group">
                <label htmlFor="profit-loss">Profit/(Loss) - NoTax</label>
                <input
                  id="profit-loss"
                  className={`input-field profit-box ${
                    selectedJob.profitLossNoTax < 0 ? "negative" : ""
                  }`}
                  type="text"
                  value={selectedJob.profitLossNoTax}
                  readOnly
                />
              </div>
            </div>

            <div
              style={{
                display: "flex",
                justifyContent: "flex-end",
                paddingRight: "10px",
              }}
            >
              <div className="job-buttons-below">
                <button className="btn btn_post" onClick={this.onExportpdf}>
                  Preview Cost Sheet
                </button>
              </div>
              <div className="job-buttons-below">
                <button
                  className="btn btn_post"
                  onClick={() => this.props.history.push("/")}
                >
                  Back
                </button>
              </div>
            </div>
            <div className="job-checkboxes">
              <label htmlFor="cost-locked">Cost Locked?</label>
              <input
                id="cost-locked"
                style={{
                  cursor: "not-allowed",
                  // accentColor: "#ec6363ff", // Make it look gray
                  // opacity: 0.6, // Dim it
                  marginLeft: "5px",
                  // transform: "scale(1.1)",
                }}
                type="checkbox"
                checked={selectedJob?.costLocked}
                // disabled={true}
              />{" "}
              {/* <label>
                <input type="checkbox" /> Cost Posted?
              </label>
              <label>
                <input type="checkbox" /> Invoice Posted?
              </label> */}
            </div>
          </div>
          {/* <div className="job-buttons">
            <button className="btn btn-blue">Save Notes/Lock</button>
            <button className="btn btn-green">Preview Cost Sheet</button>
          </div> */}

          {/* Header Tabs */}
          <HeaderTabs
            activeHeaderTab={activeHeaderTab}
            setHeaderTab={this.setHeaderTab}
          />
        </div>

        {/* Body Tabs */}
        <BodyTabs activeBodyTab={activeBodyTab} setBodyTab={this.setBodyTab} />
      </div>
    );
  }
}

export default JobDetails;
