import React, { Component, createContext } from "react";
import { Focus8WAPI, sessionId, companyCode, AccountDate } from "../mainClient";
import getSessionId from "../sessionId";
import { focusFetchDataFromApi } from "../services/focusFetchAPI";

export const JobContext = createContext();

export class JobProvider extends Component {
  state = {
    jobs: [
      {
        id: "15220/25-08",
        date: "04/08/2025",
        shipLine: "EMIRATES",
        status: "In Progress",
      },
      {
        id: "15221/25-08",
        date: "05/08/2025",
        shipLine: "TURKISH",
        status: "Completed",
      },
    ],
    selectedJob: null,
    sessionId: null,
    accountDate: null,
  };

  setSelectedJob = (job) => {
    this.setState({ selectedJob: job });
  };

  componentDidMount() {
    getSessionId();
    this.waitForResponse();
  }

  waitForResponse = async () => {
    if (typeof sessionId !== "undefined") {
      this.setState({
        sessionId: sessionId,
        accountDate: AccountDate,
      });
      console.log("Session ID and Account Date set.");
    } else {
      console.log("Waiting for sessionId...");
      setTimeout(this.waitForResponse, 1); // retry until sessionId is available
    }
  };

  fetchJobs = async (filters) => {
    try {
      const { sessionId, accountDate } = this.state;

      if (!sessionId) {
        console.error("No sessionId available yet.");
        return;
      }
      console.log("fetchJobs", filters);

      const requestData = {
        CompanyCode: companyCode,
        SessionId: sessionId,
        StartDate: filters.startDate,
        EndDate: filters.endDate,
        IgnoreDate: filters.ignoreDate,
        Type: filters.type,
        Search: filters.search,
      };
      const jobRegQuery = `
      SELECT 
   distinct h.sVoucherNo,
    dbo.IntToDate(h.iDate) AS docDate,
    --ISNULL(eb.ContainerNo, '') AS ContainerNo,
    --ISNULL(eh.HblNoHeader, '') AS HBLNo,
    --ISNULL(eb.BayanNo, '') AS BayanNo,
    ISNULL(t.iTag3008, 0) AS jobId,
    ISNULL(j.sName, '') AS jobName,
    ISNULL(j.sCode, '') AS jobCode,
    ISNULL(eh.ShippingConsignmentCode, '') AS ShippingConsignmentCode,
    ISNULL(eh.PORef, '') AS PORef,
    ISNULL(sl.sName, '') AS shippingLine,
    ISNULL(js.sName, '') AS jobStatus,
    ISNULL(eh.Arrival, '') AS Arrival,
    ISNULL(pl.sName, '') AS portLoading,
    ISNULL(pd.sName, '') AS portDestination,
    ISNULL(eh.MblNoHeader, '') AS MblNoHeader,
    ISNULL(eh.HblNoHeader, '') AS HblNoHeader,
    ISNULL(hb.sName, '') AS handleBy,
    ISNULL(eh.FreightTerms, '') AS FreightTerms,
    ISNULL(br.sName, '') AS branch,
    ISNULL(s.sName, '') AS salesman,
    ISNULL(ot.sName, '') AS operationType
FROM tCore_Header_0 h
JOIN tCore_HeaderData5634_0 eh ON eh.iHeaderId = h.iHeaderId
JOIN tCore_Data_0 d ON d.iHeaderId = h.iHeaderId
LEFT JOIN tCore_Data5634_0 eb ON eb.iBodyId = d.iBodyId
LEFT JOIN tCore_Data_Tags_0 t ON t.iBodyId = d.iBodyId
LEFT JOIN mCore_joborder j ON j.iMasterId = t.iTag3008
LEFT JOIN mCore_shippingline sl ON sl.iMasterId = t.iTag3007
LEFT JOIN mCore_jobstatus js ON js.iMasterId = t.iTag3009
LEFT JOIN mCore_port pl ON pl.iMasterId = eh.AirportofLoading
LEFT JOIN mCore_port pd ON pd.iMasterId = eh.Airportofdestination
LEFT JOIN mCore_handleby hb ON hb.iMasterId = t.iTag3038
LEFT JOIN mCore_branch br ON br.iMasterId = t.iTag3002
LEFT JOIN mCore_salesman s ON s.iMasterId = t.iTag3010
LEFT JOIN mCore_operationtype ot ON ot.iMasterId = t.iTag3014
WHERE h.iVoucherType IN (5634) 
and isNULL(eh.HblNoHeader,'') like '%%' and isNULL(eh.MblNoHeader,'') like '%%' and isNULL(eb.ContainerNo,'') like '%%'
      `;

      const jobRegRequestData = {
        data: [
          {
            Query: `${jobRegQuery}`,
          },
        ],
      };

      const jobRegResponse = await focusFetchDataFromApi(
        "utility/executesqlquery",
        jobRegRequestData,
        sessionId
      );

      if (jobRegResponse.error) {
        console.error("Error fetching jobs:", jobRegResponse.error);
        return;
      }
      if (
        jobRegResponse &&
        jobRegResponse?.data &&
        jobRegResponse?.result === 1 &&
        jobRegResponse?.data?.[0]?.Table &&
        jobRegResponse?.data?.[0]?.Table?.length > 0
      ) {
        const jobs = jobRegResponse.data?.[0]?.Table || [];
        console.log("Fetched jobs:", jobs);

        this.setState({ jobs });
      }
    } catch (error) {
      console.error("Error fetching jobs:", error);
    }
  };

  render() {
    return (
      <JobContext.Provider
        value={{
          ...this.state,
          setSelectedJob: this.setSelectedJob,
          fetchJobs: this.fetchJobs,
        }}
      >
        {this.props.children}
      </JobContext.Provider>
    );
  }
}
