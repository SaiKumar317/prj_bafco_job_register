import React, { useContext, useEffect, useState } from "react";
import { JobContext } from "../../context/JobContext";
import { focusFetchDataFromApi } from "../../services/focusFetchAPI";
import "../../styles/moveCost.css";
import { generateJobChargesExcel } from "../../utils/generateJobChargesExcel";

function JobCharges() {
  const { sessionId, selectedJob, setIsLoading, costDate } =
    useContext(JobContext);

  const [jobChargesData, setJobChargesData] = useState([]);

  useEffect(() => {
    fetchJobCharges();
  }, []);

  const fetchJobCharges = async () => {
    const jobChargesQuery = `
      SELECT 
        DISTINCT h.sVoucherNo AS documentNo,
        CONVERT(nvarchar, dbo.IntToDate(h.iDate), 103) AS docDate,
        ISNULL(eh.JobChargesId, '') AS jobChargesId,
        ISNULL(cc.iMasterId, 0) AS chargeCategoryId,
        ISNULL(cc.sCode, '') AS chargeCategoryCode,
        ISNULL(cc.sName, '') AS chargeName,
        ISNULL(ind.mGross, 0) AS amount,
        ISNULL(eh.ApprovedAmount, 0) AS approvedAmount,
        ISNULL(eh.ApprovedByID, 0) AS approvedById,
        CONVERT(nvarchar, dbo.IntToDate(ISNULL(eh.ApprovedDate, 0)), 103) AS approvedDate,
        ISNULL(eh.SfOrderItemNumber, 0) AS sfOrderItemNumber,
        CASE WHEN ISNULL(eh.InActive, 0) = 0 THEN 'False' ELSE 'True' END AS inActive,
        ISNULL(eh.UpdatedByUserId, '') AS updatedByUserId,
        CONVERT(nvarchar, dbo.IntToDate(ISNULL(eh.DateUpdated, 0)), 103) AS dateUpdated,
        ISNULL(eb.sRemarks, '') AS remarks,
        CASE WHEN ISNULL(eh.IsApprovedRequired, 0) = 0 THEN 'False' ELSE 'True' END AS isApprovalRequired,
        ISNULL(eh.ApprovedRemarks, '') AS approvedRemarks,
        ISNULL(eh.ApprovedBy, '') AS approvedBy,
        ISNULL(eh.UpdatedBy_, '') AS updatedBy,
        ISNULL(cu.sCode, '') AS currency,
        ISNULL(eh.ApprovedCurrencyID, '') AS approvedCurrencyId,
        ISNULL(eh.Billto, '') AS billTo,
        ISNULL(eh.ApprovalStatus, '') AS approvalStatus,
        CASE WHEN ISNULL(eh.IsFreightInvoice, 0) = 0 THEN 'False' ELSE 'True' END AS isFreightInvoice,
        ISNULL(eh.DocumentPath, '') AS documentPath,
        ISNULL(eh.SfOrderNumber, 0) AS sfOrderNumber,
        ISNULL(t.iTag3008, 0) AS jobId,
        ISNULL(j.sName, '') AS jobName,
        ISNULL(j.sCode, '') AS jobCode,
        d.iBodyId
      FROM tCore_Header_0 h
      JOIN tCore_HeaderData7939_0 eh ON eh.iHeaderId = h.iHeaderId
      JOIN tCore_Data_0 d ON d.iHeaderId = h.iHeaderId
      JOIN tCore_Indta_0 ind ON ind.iBodyId = d.iBodyId
      LEFT JOIN tCore_Data7939_0 eb ON eb.iBodyId = d.iBodyId
      LEFT JOIN tCore_Data_Tags_0 t ON t.iBodyId = d.iBodyId
      LEFT JOIN mCore_joborder j ON j.iMasterId = t.iTag3008
      LEFT JOIN mCore_chargecategory cc ON cc.iMasterId = t.iTag3028
      LEFT JOIN mCore_Currency cu ON cu.iCurrencyId = d.iCurrencyId
      WHERE h.iVoucherType IN (7939) --Job Charges
        AND d.iMainBodyId = 0
        AND t.iTag3008 = ${selectedJob.jobId}
    `;

    const requestData = {
      data: [{ Query: jobChargesQuery }],
    };

    try {
      const response = await focusFetchDataFromApi(
        "utility/executesqlquery",
        requestData,
        sessionId,
        setIsLoading
      );

      if (response?.result === 1 && response?.data?.[0]?.Table?.length > 0) {
        setJobChargesData(response.data[0].Table);
      } else {
        console.warn("No Job Charges data found.");
        setJobChargesData([]);
      }
    } catch (error) {
      console.error("Error fetching Job Charges data:", error);
      setJobChargesData([]);
    }
  };
  const onExport = async () => {
    // Export logic here
    if (jobChargesData.length === 0) {
      alert("No data available for export.");
      return;
    }

    generateJobChargesExcel(jobChargesData);
  };

  return (
    <div className="charges-tab">
      <h7
        style={{
          color: "#44799b",
          fontWeight: "bold",
          marginBottom: "10px",
        }}
      >
        Job Charges
      </h7>
      {jobChargesData.length > 0 && (
        <button
          className="btn btn_post"
          onClick={onExport}
          style={{
            position: "absolute",
            right: "20px",
            // // background: "transparent",
            // border: "none",
            // fontSize: "18px",
            cursor: "pointer",
            // color: "#333",
          }}
        >
          Export to Excel
        </button>
      )}
      {jobChargesData.length > 0 ? (
        <div
          style={{ overflowX: "auto", maxHeight: "75vh", marginTop: "20px" }}
        >
          <table className="job-table" style={{ width: "max-content" }}>
            <thead>
              <tr>
                <th>jobChargesId</th>
                <th>chargeCategoryId</th>
                <th>chargeCategoryCode</th>
                <th>chargeName</th>
                <th>amount</th>
                <th>approvedAmount</th>
                <th>approvedById</th>
                <th>approvedDate</th>
                <th>sfOrderItemNumber</th>
                <th>inActive</th>
                <th>updatedByUserId</th>
                <th>dateUpdated</th>
                <th>remarks</th>
                <th>isApprovalRequired</th>
                <th>approvedRemarks</th>
                <th>approvedBy</th>
                <th>updatedBy</th>
                <th>currency</th>
                <th>approvedCurrencyId</th>
                <th>approvedCurrency</th>
                <th>billTo</th>
                <th>approvalStatus</th>
                <th>isFreightInvoice</th>
                <th>documentPath</th>
                <th>sfOrderNumber</th>
              </tr>
            </thead>
            <tbody>
              {jobChargesData.map((entry, index) => (
                <tr
                  key={index}
                  className={`tr-tablerow ${
                    index % 2 === 0 ? "even-row" : "odd-row"
                  }`}
                >
                  <td className="text-align-right">{entry.jobChargesId}</td>
                  <td className="text-align-right">{entry.chargeCategoryId}</td>
                  <td>{entry.chargeCategoryCode}</td>
                  <td>{entry.chargeName}</td>
                  <td className="text-align-right">{entry.amount}</td>
                  <td className="text-align-right">{entry.approvedAmount}</td>
                  <td className="text-align-right">{entry.approvedById}</td>
                  <td>{entry.approvedDate}</td>
                  <td className="text-align-right">
                    {entry.sfOrderItemNumber}
                  </td>
                  <td>{entry.inActive}</td>
                  <td>{entry.updatedByUserId}</td>
                  <td>{entry.dateUpdated}</td>
                  <td>{entry.remarks}</td>
                  <td>{entry.isApprovalRequired}</td>
                  <td>{entry.approvedRemarks}</td>
                  <td>{entry.approvedBy}</td>
                  <td>{entry.updatedBy}</td>
                  <td>{entry.currency}</td>
                  <td className="text-align-right">
                    {entry.approvedCurrencyId}
                  </td>
                  <td>{entry.approvedCurrency}</td>
                  <td>{entry.billTo}</td>
                  <td>{entry.approvalStatus}</td>
                  <td>{entry.isFreightInvoice}</td>
                  <td>{entry.documentPath}</td>
                  <td className="text-align-right">{entry.sfOrderNumber}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ) : (
        <p style={{ fontWeight: "bold" }}>
          No job charges data found for the selected job.
        </p>
      )}
    </div>
  );
}

export default JobCharges;
