import React, { useContext, useEffect, useState } from "react";
import { JobContext } from "../../context/JobContext";
import { focusFetchDataFromApi } from "../../services/focusFetchAPI";
import "../../styles/moveCost.css";
import { generateJobDocumentsExcel } from "../../utils/generateJobDocExcel";

function JobAttachments() {
  const { sessionId, selectedJob, setIsLoading } = useContext(JobContext);
  const [attachmentsData, setAttachmentsData] = useState([]);

  useEffect(() => {
    fetchJobAttachments();
  }, []);

  const fetchJobAttachments = async () => {
    const attachmentsQuery = `
      SELECT 
        DISTINCT h.sVoucherNo AS documentNo,
        CONVERT(nvarchar, dbo.IntToDate(h.iDate), 103) AS docDate,
        ISNULL(eb.AttachedId, '') AS attachedId,
        ISNULL(eb.FileName, '') AS fileName,
        ISNULL(eb.PathName, '') AS pathName,
        ISNULL(eb.AttachmentTypeName, '') AS attachmentTypeName,
        ISNULL(t.iTag3008, 0) AS jobId,
        ISNULL(j.sName, '') AS jobName,
        ISNULL(j.sCode, '') AS jobCode,
        d.iBodyId
      FROM tCore_Header_0 h
      JOIN tCore_Data_0 d ON d.iHeaderId = h.iHeaderId
      JOIN tCore_Indta_0 ind ON ind.iBodyId = d.iBodyId
      LEFT JOIN tCore_Data5642_0 eb ON eb.iBodyId = d.iBodyId
      LEFT JOIN tCore_Data_Tags_0 t ON t.iBodyId = d.iBodyId
      LEFT JOIN mCore_joborder j ON j.iMasterId = t.iTag3008
      WHERE h.iVoucherType IN (5642)
        AND d.iMainBodyId = 0
        AND t.iTag3008 = ${selectedJob.jobId}
    `;

    const requestData = {
      data: [{ Query: attachmentsQuery }],
    };

    try {
      const response = await focusFetchDataFromApi(
        "utility/executesqlquery",
        requestData,
        sessionId,
        setIsLoading
      );

      if (response?.result === 1 && response?.data?.[0]?.Table?.length > 0) {
        setAttachmentsData(response.data[0].Table);
      } else {
        console.warn("No job attachment data found.");
        setAttachmentsData([]);
      }
    } catch (error) {
      console.error("Error fetching job attachments:", error);
      setAttachmentsData([]);
    }
  };

  const onExport = async () => {
    // Export logic here
    if (attachmentsData.length === 0) {
      alert("No data available for export.");
      return;
    }
    generateJobDocumentsExcel(attachmentsData);
  };

  return (
    <div className="charges-tab">
      <h7
        style={{ color: "#44799b", fontWeight: "bold", marginBottom: "10px" }}
      >
        Job Documents
      </h7>
      {attachmentsData.length > 0 && (
        <button
          className="btn btn_post"
          onClick={onExport}
          style={{
            position: "absolute",
            right: "20px",
            // // background: "transparent",
            // border: "none",
            // fontSize: "18px",
            cursor: "pointer",
            // color: "#333",
          }}
        >
          Export to Excel
        </button>
      )}
      {attachmentsData.length > 0 ? (
        <div
          style={{ overflowX: "auto", maxHeight: "75vh", marginTop: "20px" }}
        >
          <table className="job-table" style={{ width: "max-content" }}>
            <thead>
              <tr>
                <th>Attachment Id</th>
                <th>File Name</th>
                <th>Path Name</th>
                <th>Attachment Type Name</th>
              </tr>
            </thead>
            <tbody>
              {attachmentsData.map((entry, index) => (
                <tr
                  key={index}
                  className={`tr-tablerow ${
                    index % 2 === 0 ? "even-row" : "odd-row"
                  }`}
                >
                  <td>{entry.attachedId}</td>
                  <td>{entry.fileName}</td>
                  <td>
                    {entry.pathName ? (
                      <a
                        href={entry.pathName}
                        target="_blank"
                        rel="noopener noreferrer"
                        title={entry.pathName}
                      >
                        {entry.pathName}
                      </a>
                    ) : (
                      "-"
                    )}
                  </td>
                  <td>{entry.attachmentTypeName}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ) : (
        <p style={{ fontWeight: "bold" }}>
          No attachments found for the selected job.
        </p>
      )}
    </div>
  );
}

export default JobAttachments;
